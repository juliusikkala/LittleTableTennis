/*
The MIT License (MIT)

Copyright (c) 2018 Julius Ikkala

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
#ifndef BOARD_HH
#define BOARD_HH
#include "littleton/object.hh"
#include "littleton/window.hh"
#include "littleton/resource_pool.hh"
#include "littleton/scene_graph.hh"
#include "littleton/scene.hh"
#include "littleton/light.hh"
#include "littleton/environment_map.hh"
#include "littleton/method/shadow_msm.hh"
#include "littleton/camera.hh"
#include "pipeline.hh"
#include <vector>

class board
{
public:
    board(
        lt::window& win,
        lt::resource_pool& pool,
        pipeline& pl,
        const std::string& data_path,
        const std::string& board_path,
        const std::string& counter_path
    );

    lt::render_scene* get_scene();

    /* Sets the position of the paddle. player_index is the index of the player
     * whose paddle is being moved, pos is the position of the paddle in the
     * range [-1, 1].
     */
    void set_paddle_pos(unsigned player_index, float pos);
    float get_paddle_pos(unsigned player_index) const;

    // Updates the board state
    void update(float dt);

    // Returns true and sets 'winner' to the index of the winning player if the
    // game is over. Otherwise returns false.
    bool declare_winner(unsigned& winner);

private:
    /* This object generally has the ownership of all the objects on the board.
     * In this case, the counter numbers form an exception, since they are
     * generated by the constructor.
     */
    lt::scene_graph graph;

    /* lt::render_scene should only contain stuff that should be rendered on the
     * next frame.
     */
    lt::render_scene scene;

    struct player
    {
        /* The number models used to show the score. All players have
         * differently colored numbers, which is why the number models are
         * player-specific.
         */
        struct lt::model numbers[10];

        // The numbers of the score
        std::vector<lt::object> score_numbers;

        // The paddle of the player
        lt::object* paddle;

        // The score of the player
        unsigned score;
    };

    std::vector<player> players;
    lt::object* game_board;
    lt::object* ball;
    float ball_velocity;
    lt::vec3 ball_dir;

    lt::directional_light sun;
    lt::directional_shadow_map_msm sun_shadow;

    lt::environment_map environment;

    lt::camera cam;
};

#endif
